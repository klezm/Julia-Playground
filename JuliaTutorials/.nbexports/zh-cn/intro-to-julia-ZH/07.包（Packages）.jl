
# ------------------------------------------------------------------------------------------
# # 软件包（Packages）
#
# Julia 有超过 2000 个登记在案的包，这使得第三方的软件包成为 Julia 语言生态的重要组成部分。
# 尽管如此，软件包生态依然有很大的成长空间。
#
# 值得一提的是，调用其它语言的函数在 Julia 中也是一等公民，，提供了很棒的外部函数接口（FFI）。
# 我们可以很容易地通过 `PyCall` 或 `Rcall` 调用 Python 或 R。
# 这意味着你不必等到 Julia 的生态完全成熟就能迁移现有项目到 Julia，
# 而且迁移到 Julia 并不意味着放弃你在其他语言中惯用的包或者库！
#
# 查看全部可获得的包，请看
# https://pkg.julialang.org/
# 或者
# https://juliaobserver.com/
#
# 现在我们先学习一下该如何使用包。
# ------------------------------------------------------------------------------------------

# ------------------------------------------------------------------------------------------
# 在安装好的 Julia 中第一次要使用一个包的时候，你需要用包管理器（package manager）明确添加（add）它：
# ------------------------------------------------------------------------------------------

using Pkg
Pkg.add("Example")

# ------------------------------------------------------------------------------------------
# 之后每次使用 Julia 时（比如打开一个新的 REPL 会话或者第一次打开一个 notebook），
# 你需要通过 `using` 关键字载入要用的包
# ------------------------------------------------------------------------------------------

using Example

# ------------------------------------------------------------------------------------------
# 在 `Example.jl` 的源码
# https://github.com/JuliaLang/Example.jl/blob/master/src/Example.jl
# 中我们可以看到声明了下面这个函数
#
# ```julia
# hello(who::String) = "Hello, $who"
# ```
#
# 载入了 `Example` 我们现在应该可以调用 `hello` 函数了
# ------------------------------------------------------------------------------------------

hello("it's me. I was wondering if after all these years you'd like to meet.")

# ------------------------------------------------------------------------------------------
# 现在让我们来玩 `Colors` 包吧
# ------------------------------------------------------------------------------------------

Pkg.add("Colors")

using Colors

# ------------------------------------------------------------------------------------------
# 我们来创建一个 100 个不同颜色的调色板
# ------------------------------------------------------------------------------------------

palette = distinguishable_colors(100)

# ------------------------------------------------------------------------------------------
# 然后通过 `rand` 函数来创建随机矩阵
# ------------------------------------------------------------------------------------------

rand(palette, 3, 3)

# ------------------------------------------------------------------------------------------
# 在下一个 notebook 中，我们将使用一个新的包来绘制数据集。
# ------------------------------------------------------------------------------------------

# ------------------------------------------------------------------------------------------
# ### 练习
#
# #### 7.1
# 加载 `Primes` 包（源码在https://github.com/JuliaMath/Primes.jl ）
# ------------------------------------------------------------------------------------------

# 在此作答。做点什么以安装要求的包。

using Primes

@assert @isdefined Primes

# ------------------------------------------------------------------------------------------
# #### 7.2
# 使用 `primes` 函数获得所有小于 1,000,000 的质数，并把它存入变量 `primes_list`
# ------------------------------------------------------------------------------------------

# 在此作答
primes_list = [];

@assert primes_list == primes(1000000)

# ------------------------------------------------------------------------------------------
# 请在完成练习运行 `@assert` 块以检测结果是否正确，若无报错即为正确。
# ------------------------------------------------------------------------------------------
